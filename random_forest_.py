# -*- coding: utf-8 -*-
"""random forest .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NWT_JRdpL0zm-vUeTNW-97hOszdoCZZJ
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
import matplotlib.pyplot as plt 
plt.rc("font", size=14)
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error
import seaborn as sns
sns.set(style="white")
sns.set(style="whitegrid", color_codes=True)

data=pd.read_csv("/content/housing.csv")

data.head()

column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
#assigning columns names to our data
data=pd.read_csv("/content/housing.csv",header=None,delimiter=r"\s+", names=column_names)

data.head()

data.shape

data.columns

data.dtypes

data.nunique()

data.isnull().sum()

data[data.isnull().any(axis=1)]

data.describe()

corr = data.corr()
corr.shape

plt.figure(figsize=(20,20))
sns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15}, cmap='Greens')

data.MEDV.hist()

sns.distplot(data['MEDV'], bins=30)
plt.show()

data=data[~(data["MEDV"]>=50)]
sns.distplot(data['MEDV'], bins=30)
plt.show()

plt.figure(figsize=(10, 5))

plt.scatter(data.CRIM,data.MEDV)
plt.xlabel("Per capita crime rate by town")
plt.ylabel("Housing Price")
plt.title("House price vs per capita crime rate by town");

plt.figure(figsize=(10,5))

plt.scatter(data.RM,data.MEDV)
plt.xlabel("average number of rooms per dwelling")
plt.ylabel("Housing Price")
plt.title("House prices vs Number of rooms");

plt.figure(figsize=(10,5))
plt.scatter(data.DIS,data.MEDV)
plt.xlabel("weighted distances to five Boston employment centres")
plt.ylabel("House Prices")
plt.title("House prices vs five Boston employment centres");

plt.figure(figsize=(10,5))
plt.scatter(data.AGE,data.MEDV)
plt.xlabel("proportion of owner-occupied units built prior to 1940")
plt.ylabel("House prices")
plt.title("House Price vs Age of the house");

X=data.drop("MEDV",axis=1)
y=data["MEDV"]

np.random.seed(42)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

r_forest=RandomForestRegressor()

#fitting our training data into our model
r_forest.fit(X_train,y_train)

#predict on  test data using our model
r_preds=r_forest.predict(X_test)

#evaluate our second model performance

#evaluate our model's performance using mean squared error
mse=mean_squared_error(y_test,r_preds)
mae=mean_absolute_error(y_test,r_preds)

#evaluate our model's performance using r2_score
R2_score=r2_score(y_test,r_preds)

print("Random Forest Regression")
print("Mean Squared Error :",mse)
print("mean Absolute Error :",mae)
print("R2 Score :",R2_score)